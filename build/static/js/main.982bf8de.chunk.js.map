{"version":3,"sources":["axios.js","requests.js","Banner.js","Row.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","useState","movie","setMovie","console","log","useEffect","a","get","request","Math","random","data","results","length","floor","fetchData","className","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","original_name","overview","substr","Row","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","then","req","map","onClick","movieTrailer","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","key","id","src","poster_path","alt","videoId","opts","height","width","playerVars","autoplay","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.982bf8de.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\nexport default instance;\r\n","const API_KEY = \"25bdddb30ad8afeda5581878ed9018f8\";\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState([]);\r\n  console.log(movie);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n\r\n      setMovie(\r\n        (await request).data.results[\r\n          Math.floor(Math.random() * (await request).data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  console.log(movie);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\r\n            \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n        )`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"banner__contents\">\r\n        {/*title*/}\r\n        <h1 className=\"banner__title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n\r\n        {/*div > 2 buuton */}\r\n        <div className=\"banner__buttons\">\r\n          <button className=\"banner__button\">play</button>\r\n          <button className=\"banner__button\">My List</button>\r\n        </div>\r\n\r\n        {/*discription */}\r\n        <h1 className=\"banner__description\">\r\n          {truncate(movie?.overview, 150)}\r\n        </h1>\r\n      </div>\r\n      <div className=\"banner__fadebottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\nimport \"./Row.css\";\r\nimport axios from \"./axios\";\r\nconst base_url = \"https://image.tmdb.org/t/p/original\";\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    function fetchData() {\r\n      axios.get(fetchUrl).then((req) => {\r\n        setMovies(req.data.results);\r\n      });\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: \"390\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n      //http://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  const handleClick = (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      movieTrailer(movie?.name || \"\")\r\n        .then((url) => {\r\n          //http://www.youtube.com/watch?v=uhbkliwhkflhh\r\n          const urlParams = new URLSearchParams(new URL(url).search);\r\n          setTrailerUrl(urlParams.get(\"v\"));\r\n        })\r\n        .catch((error) => console.log(error));\r\n    }\r\n  };\r\n\r\n  console.log(movies);\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row_posters\">\r\n        {console.log(\"movies\", movies)}\r\n        {movies.map((movie) => (\r\n          <img\r\n            onClick={() => handleClick(movie)}\r\n            key={movie.id}\r\n            className={`row__poster ${isLargeRow && \"row__posterLarger\"}`}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Nav.css\";\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else handleShow(false);\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav__black\"}`}>\r\n      <img\r\n        className=\"nav__logo\"\r\n        src=\"https://www.freepnglogos.com/uploads/red-netflix-logo-text-png-3.png\"\r\n        alt=\"red netflix logo text png\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\nimport Banner from \"./Banner\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nav />\n      <Banner />\n\n      <Row\n        title=\"NETFLIX ORIGINAL\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}